//
//  Wrapper.h
//  StereoDisplay
//
//  Created by Chris Birkhold on 2/4/19.
//

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __WRAPPER_H__
#define __WRAPPER_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <array>

#include "../../_OpenVRApi.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../../StereoDisplay.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace HWW {

    class HWWrapper;

} // namespace HWW

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Wrapper implementation of a StereoDisplay/PoseTracker.
//------------------------------------------------------------------------------

class WrapperDisplay
    : public StereoDisplay
    , public PoseTracker
{
    //------------------------------------------------------------------------------
     // Configuration/Types
public:

    static constexpr bool FAIL_IF_WATCHDOG_EXPIRES = false;

    //------------------------------------------------------------------------------
    // Construction/Destruction
public:

    WrapperDisplay(std::shared_ptr<HWW::HWWrapper> wrapper, size_t width, size_t height);

	std::shared_ptr<HWW::HWWrapper> wrapper() const noexcept { return m_wrapper; }

    //------------------------------------------------------------------------------
    // Audio Timestamps
public:

    //------------------------------------------------------------------------------
    // Set the timestamp for the next drawable.
    void set_audio_timestamp(double timestamp) { m_audio_timestamp = timestamp; }

    //------------------------------------------------------------------------------
    // [StereoDisplay]
public:

    glm::mat4 projection_matrix(size_t eye_index, double near_z, double far_z) const noexcept override;

    StereoDrawable_UP wait_next_drawable() const override;
    StereoDrawable_UP wait_next_drawable_for(const std::chrono::microseconds& duration, bool* try_failed) const override;

    //------------------------------------------------------------------------------
    // [PoseTracker]
public:

    void wait_get_poses() override {}
    const glm::mat4 hmd_pose() const noexcept override;

    //------------------------------------------------------------------------------
    // {Private}
private:

    class RenderTarget;
    class Drawable;

    const std::shared_ptr<HWW::HWWrapper>       m_wrapper;                  // Wrapper shared with the application

    std::shared_ptr<const RenderTarget>         m_render_target;            // Render target shared with the WrapperDrawable instance
    double                                      m_audio_timestamp = 0.0;    // Timestamp for audio synchronization
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __WRAPPER_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
