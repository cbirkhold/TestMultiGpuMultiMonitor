//
//  Wrapper.h
//  StereoDisplay
//
//  Created by Chris Birkhold on 2/4/19.
//

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __WRAPPER_H__
#define __WRAPPER_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <set>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../../StereoDisplay.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace HWW {

    class HWWrapper;

} // namespace HWW

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Wrapper implementation of a StereoDisplay.
//------------------------------------------------------------------------------

class WrapperStereoDisplay : public StereoDisplay
{
    //------------------------------------------------------------------------------
     // Configuration/Types
public:

    static constexpr bool FAIL_IF_WATCHDOG_EXPIRES = false;
    static constexpr float DEFAULT_IPD = 65.0f;

    //------------------------------------------------------------------------------
    // Construction/Destruction
public:

    WrapperStereoDisplay(
        std::pair<HDC, HGLRC> context,
        size_t width,
        size_t height,
        ColorSpace color_space,
        std::shared_ptr<HWW::HWWrapper> wrapper
    );

    const std::set<GLenum>& wrapper_opengl_errors() const noexcept { return m_wrapper_opengl_errors; }

    //------------------------------------------------------------------------------
    // [StereoDisplay]
public:

    glm::mat4 projection_matrix(size_t eye_index, double near_z, double far_z) const noexcept override;

    const StereoRenderTarget& render_target() const noexcept override { return m_render_target; }

    void submit() const override
    {
        throw std::runtime_error("Submitting is not supported by this implementation!");
    }

    void render(const StereoDisplay& stereo_display, double timestamp) const override;

    //------------------------------------------------------------------------------
    // {Private}
private:

    const StereoRenderTarget                    m_render_target;

    const std::shared_ptr<HWW::HWWrapper>       m_wrapper;
    mutable std::set<GLenum>                    m_wrapper_opengl_errors;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------
// Wrapper implementation of a PoseTracker.
//------------------------------------------------------------------------------

class WrapperPoseTracker : public PoseTracker
{
    //------------------------------------------------------------------------------
     // Configuration/Types
public:

    static constexpr bool FAIL_IF_WATCHDOG_EXPIRES = false;

    //------------------------------------------------------------------------------
    // Construction/Destruction
public:

    explicit WrapperPoseTracker(std::shared_ptr<HWW::HWWrapper> wrapper);

    std::shared_ptr<HWW::HWWrapper> wrapper() const noexcept { return m_wrapper; }

    //------------------------------------------------------------------------------
    // [PoseTracker]
public:

    void wait_get_poses() override {}
    glm::mat4 hmd_pose() const noexcept override;

    //------------------------------------------------------------------------------
    // {Private}
private:

    const std::shared_ptr<HWW::HWWrapper>       m_wrapper;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __WRAPPER_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
