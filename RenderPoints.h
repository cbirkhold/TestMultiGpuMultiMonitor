//
//  RenderPoints.h
//  vmi-player
//
//  Created by Chris Birkhold on 2/4/19.
//

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __RENDER_POINTS_H__
#define __RENDER_POINTS_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "_OpenGLApi.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class RenderPoints
{
public:

    static GLuint create_program();

    static void set_rect(const float* const ndc_rect)
    {
        if (s_uniform_location_rect != -1) {
            glUniform4fv(s_uniform_location_rect, 1, ndc_rect);
        }
    }

    static void set_mvp(const float* const mvp)
    {
        if (s_uniform_location_mvp != -1) {
            glUniformMatrix4fv(s_uniform_location_mvp, 1, GL_FALSE, mvp);
        }
    }

    static void set_color_mask(const float* const color_mask)
    {
        if (s_uniform_location_color_mask != -1) {
            glUniform4fv(s_uniform_location_color_mask, 1, color_mask);
        }
    }

    static void draw(GLuint& vao, size_t grid_size)
    {
        if (!vao) {
            glGenVertexArrays(1, &vao);
        }

        glUniform1i(s_uniform_location_grid_size, int(grid_size));
        glUniform1f(s_uniform_location_grid_size_minus_one_recip, (1.0f / float(grid_size - 1)));

        glBindVertexArray(vao);
        glDrawArrays(GL_POINTS, 0, GLsizei(grid_size * grid_size));
    }

private:

    static GLint        s_uniform_location_rect;
    static GLint        s_uniform_location_mvp;
    static GLint        s_uniform_location_grid_size;
    static GLint        s_uniform_location_grid_size_minus_one_recip;
    static GLint        s_uniform_location_color_mask;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __RENDER_POINTS_H__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
